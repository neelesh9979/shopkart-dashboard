{"ast":null,"code":"var _jsxFileName = \"/var/www/html/neelesh/shopkart-dashboard/src/components/Router.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { createBrowserRouter, useNavigate } from \"react-router-dom\";\n\n// import components\n\nimport Login from '../pages/Login';\nimport Register from '../pages/Register';\nimport Dashboard from '../pages/Dashboard';\nimport PageNotFound from '../pages/PageNotFound';\n\n// import PrivateRoute from \"./ProtectedRoute\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element: Component\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const token = sessionStorage.getItem('userTokenId');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const verifyToken = async () => {\n      try {\n        const response = await fetch('https://fun-cougar-precisely.ngrok-free.app/api/authverify', {\n          method: \"GET\",\n          headers: {\n            'Authorization': `Bearer ${token}` // Typically, the token should be prefixed with \"Bearer \"\n          }\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setIsAuthenticated(data.isAuthenticated); // Assuming your API returns this field\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error('Error verifying token:', error);\n        setIsAuthenticated(false);\n      }\n    };\n    if (token) {\n      verifyToken();\n    } else {\n      setIsAuthenticated(false);\n    }\n  }, [token]);\n  if (isAuthenticated === null) {\n    // While loading, you can show a spinner or some loading text\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n\n  // If authenticated, render the component, otherwise redirect to login\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 30\n  }, this) : navigate('/login');\n};\n_s(PrivateRoute, \"nwic/4CFidGALQX/JP5v1S+PkMs=\", false, function () {\n  return [useNavigate];\n});\n_c = PrivateRoute;\nconst Router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(PrivateRoute, {\n    element: Dashboard\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 18\n  }, this),\n  index: true\n}, {\n  path: '/login',\n  element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 18\n  }, this)\n}, {\n  path: '/register',\n  element: /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 18\n  }, this)\n}, {\n  path: '*',\n  element: /*#__PURE__*/_jsxDEV(PageNotFound, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 18\n  }, this)\n}]);\nexport default Router;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useState","useEffect","createBrowserRouter","useNavigate","Login","Register","Dashboard","PageNotFound","jsxDEV","_jsxDEV","PrivateRoute","element","Component","_s","isAuthenticated","setIsAuthenticated","token","sessionStorage","getItem","navigate","verifyToken","response","fetch","method","headers","ok","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Router","path","index","$RefreshReg$"],"sources":["/var/www/html/neelesh/shopkart-dashboard/src/components/Router.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { createBrowserRouter, useNavigate } from \"react-router-dom\";\n\n// import components\n\nimport Login from '../pages/Login';\nimport Register from '../pages/Register';\nimport Dashboard from '../pages/Dashboard';\nimport PageNotFound from '../pages/PageNotFound';\n\n// import PrivateRoute from \"./ProtectedRoute\";\n\nconst PrivateRoute = ({ element: Component }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\n    const token = sessionStorage.getItem('userTokenId');\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const verifyToken = async () => {\n            try {\n                const response = await fetch('https://fun-cougar-precisely.ngrok-free.app/api/authverify', {\n                    method: \"GET\",\n                    headers: {\n                        'Authorization': `Bearer ${token}` // Typically, the token should be prefixed with \"Bearer \"\n                    }\n                });\n\n                if (response.ok) {\n                    const data = await response.json();\n                    setIsAuthenticated(data.isAuthenticated); // Assuming your API returns this field\n                } else {\n                    setIsAuthenticated(false);\n                }\n            } catch (error) {\n                console.error('Error verifying token:', error);\n                setIsAuthenticated(false);\n            }\n        };\n\n        if (token) {\n            verifyToken();\n        } else {\n            setIsAuthenticated(false);\n        }\n    }, [token]);\n\n    if (isAuthenticated === null) {\n        // While loading, you can show a spinner or some loading text\n        return <div>Loading...</div>;\n    }\n\n    // If authenticated, render the component, otherwise redirect to login\n    return isAuthenticated ? <Component /> : navigate('/login');\n};\n\nconst Router = createBrowserRouter([\n    {\n        path: '/',\n        element: <PrivateRoute element={Dashboard} />,\n        index: true\n    },\n    {\n        path: '/login',\n        element: <Login />\n    },\n    {\n        path: '/register',\n        element: <Register />\n    },\n    {\n        path: '*',\n        element: <PageNotFound />\n    }\n]);\n\n export default Router; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}